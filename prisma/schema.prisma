generator authClient {
  provider = "prisma-client-js"
  output   = "./generated/auth-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String      @id @default(cuid())
  name           String?
  email          String?     @unique
  password       String
  emailVerified  DateTime?
  image          String?
  cover          String?
  role           String?     @default("user")
  country        String?
  accounts       Account[]
  sessions       Session[]
  videos         Video[]
  likedVideos    VideoLike[]
  followers      Follower[]  @relation("Following")
  following      Follower[]  @relation("Followers")
  followersCount Int         @default(0)
  followingCount Int         @default(0)
  createdAt      DateTime    @default(now())

  @@unique([id, email])
}

model Video {
  id          String      @id @default(cuid())
  title       String
  description String
  category    String
  hashtag     String
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoLink   String
  thumbnail   String?
  likesConunt Int         @default(0)
  likes       VideoLike[]
  views       Int         @default(0)
  createdAt   DateTime    @default(now())

  @@unique([id, userId])
}

model Follower {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("Following", fields: [followerId], references: [id])
  following   User   @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model VideoLike {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  video Video @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
}
